version: "3"
services:
  # ------- general ------ #
  redis:
    image: redis:7.2.4
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
      start_period: 10s
    expose:
      - "${REDIS_PORT}"

  # ------- auth service ------ #
  auth_db:
    build: ./auth_service/postgres
    container_name: auth_db
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    volumes:
      - pgdbauth_all:/var/lib/postgresql@13/data/
    expose:
      - "${AUTH_DB_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${AUTH_DB_NAME} -U ${AUTH_DB_USER}"]
      interval: 5s
      timeout: 10s
      retries: 5
  
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "6831:6831"
      - "16686:16686"
    depends_on:
      nginx:
        condition: service_started

  auth_service:
    build:
      context: .
      dockerfile: ./auth_service/auth.Dockerfile
    command: sh -c "alembic upgrade head && python3 src/main.py"
    container_name: auth_service
    expose:
      - "8000"
    depends_on:
      redis:
        condition: service_healthy
      auth_db:
        condition: service_healthy
    env_file:
      - ./envs/auth.env

  # ------- admin service ------ #
  admin_db:
    image: postgres:13
    container_name: admin_db
    environment:
      POSTGRES_DB: ${ADMIN_DB_NAME}
      POSTGRES_USER: ${ADMIN_DB_USER}
      POSTGRES_PASSWORD: ${ADMIN_DB_PASSWORD}
    volumes:
      - pgdbadmin_all:/var/lib/postgresql@13/data/
      - ./admin_service/initdb.sql:/docker-entrypoint-initdb.d/init.sql
    expose:
      - "${ADMIN_DB_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${ADMIN_DB_NAME} -U ${ADMIN_DB_USER}"]
      interval: 5s
      timeout: 10s
      retries: 5
    env_file:
      - ./envs/admin.env

  admin_service:
    container_name: admin_service
    build:
      context: .
      dockerfile: ./admin_service/django.Dockerfile
    command: sh -c "python3 manage.py migrate --noinput && python3 manage.py collectstatic --no-input --clear && gunicorn config.wsgi:application --bind ${ADMIN_APP_HOST}:${ADMIN_APP_PORT}"
    expose:
      - "8000"
    volumes:
      - static_volume_all:/app/static
    depends_on:
      admin_db:
        condition: service_healthy
    env_file:
      - ./envs/admin.env

  # ------- content_service ------ #
  elastic:
    container_name: elastic
    image: elasticsearch:8.6.2
    environment:
      ES_JAVA_OPTS: ${ES_JAVA_OPTS}
      xpack.security.enabled: ${SECURITY}
      discovery.type: ${DISCOVERY}
    expose:
      - "${ELASTIC_PORT}"
    volumes:
      - elasticdata_all:/usr/share/elasticsearch/data
    healthcheck:
      test: curl -s ${ELASTIC_HOST}:${ELASTIC_PORT} >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50

  content_service:
    container_name: content_service
    build:
      context: .
      dockerfile: ./content_service/content.Dockerfile
    expose:
      - "8000"
    command: >
      sh -c "until curl -s elastic:${ELASTIC_PORT} >/dev/null; do sleep 1; done; python src/main.py"
    env_file:
      - ./envs/content.env

  # ------- etl_service ------ #
  etl-films:
    container_name: etl-films
    build:
      context: .
      dockerfile: ./etl_service/etl.Dockerfile
    command: python postgres_to_es.py films
    depends_on:
      admin_db:
        condition: service_healthy
      elastic:
        condition: service_healthy
    env_file:
      - ./envs/etl.env

  etl-genres:
    container_name: etl-genres
    build:
      context: .
      dockerfile: ./etl_service/etl.Dockerfile
    command: python postgres_to_es.py genres
    depends_on:
      admin_db:
        condition: service_healthy
      elastic:
        condition: service_healthy
    env_file:
      - ./envs/etl.env

  etl-persons:
    container_name: etl-persons
    build:
      context: .
      dockerfile: ./etl_service/etl.Dockerfile
    command: python postgres_to_es.py persons
    depends_on:
      admin_db:
        condition: service_healthy
      elastic:
        condition: service_healthy
    env_file:
      - ./envs/etl.env
  
  # -------ugc-сервис----- #
  ugc-api:
    build:
      context: .
      dockerfile: ./ugc/ugc-api.Dockerfile
    container_name: ugc-service-api
    environment:
      - WORKERS=1
      - PORT_APP=5000
    depends_on:
      - kafka
      - auth_service
    # ports:
    #   - "5000:5000"
    expose:
      - "5000"
    env_file:
      - ./ugc/api/src/.env
  
  ugc-etl:
    build:
      context: .
      dockerfile: ./ugc/ugc-etl.Dockerfile
    container_name: ugc-service-etl
    depends_on:
      kafka: 
        condition: service_started
      clickhouse:
        condition: service_healthy
    env_file:
      - ./ugc/etl/.env
  
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9094:9094"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_BROKER_ID=0
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_KRAFT_CLUSTER_ID=NzuVY3xIRF2x-SG4uzn4SQ
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: nc -z kafka 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
  
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - "8800:8080"
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_NAME=kraft
  
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      - CLICKHOUSE_DB=movies_analysis
      - CLICKHOUSE_USER=app
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
      - CLICKHOUSE_PASSWORD=qwe123
    volumes:
      - clickhouse_data:/var/lib/clickhouse/
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 10s
      timeout: 10s
      retries: 20

  cloudbeaver:
    image: dbeaver/cloudbeaver:24.0.5
    container_name: services-dbeaver
    ports:
      - '8978:8978'
    volumes: 
      - cloudbeaver:/opt/cloudbeaver/workspace 

  # ------- nginx ------ #
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/site.conf:/etc/nginx/conf.d/site.conf:ro
      - static_volume_all:/app/static:ro
    depends_on:
      auth_service:
        condition: service_started
      content_service:
        condition: service_started
      admin_service:
        condition: service_started
      ugc-api:
        condition: service_started
    ports:
      - "${SERVICE_PORT}:80"

volumes:
  pgdbauth_all:
  pgdbadmin_all:
  elasticdata_all:
  static_volume_all:
  kafka_data:
  clickhouse_data:
  cloudbeaver:
